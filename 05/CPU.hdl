// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // 1st Mux on diagram 
    Mux16(a=instruction ,b=aluOut ,sel=instruction[15] ,out=aIn );

    // Register A control
    Not(in=instruction[15] , out=controlA1 );
    Or(a=controlA1 ,b=instruction[5] ,out=loadA );
    
    // Register A
    ARegister(in=aIn ,load=loadA ,out=aOut );

    // 2nd Mux on diagram
    Mux16(a=aOut ,b=inM ,sel=instruction[12] ,out=aluInAorM ); 

    // Register D Control
    And(a=instruction[4] , b=instruction[15] , out=dLoad );
    // Register D
    DRegister(in=aluOut ,load=dLoad ,out=dOut );



    ////ALU
    ALU(x=dOut ,y=aluInAorM ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluOut ,zr=zrOut ,ng=ngOut );

    //OUT outM[16],        // M value output
    Or16(a=aluOut, b= aluOut, out=outM);

    //writeM,  Write to M? 
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Address in data memory (of M)
    Or16(a=aOut, b= aOut, out[0..14]=addressM) ;




    ////Figure out PC
    //if negative 
    And(a=instruction[2], b= instruction[15], out=jumpLT);
    And(a=jumpLT, b=ngOut, out=ifNeg);

    //if zero
    And(a=instruction[1], b= instruction[15], out=jumpZR);
    And(a=jumpZR, b=zrOut, out=ifZero);


    //if not negative and not zero
    And(a=instruction[0], b= instruction[15], out=jumpGT);
    Not(in=zrOut, out= notZero);
    Not(in=ngOut, out=notNeg);
    And(a=notZero, b=notNeg, out=notZeroAndNotNeg);
    And(a=jumpGT, b=notZeroAndNotNeg, out=ifNotNegAndNotZero);


    //1st should load PC
    Or(a=ifNeg, b=ifZero, out=ifNegOrZero );

    //2nd if should load PC
    Or(a=ifNegOrZero, b=ifNotNegAndNotZero, out=pcLoad );

    // only inc if not load    
    //Not(in=pcLoad, out=PCinc);   

    PC(in=aOut , inc=true , load=pcLoad , reset=reset , out[0..14]=pc);
}